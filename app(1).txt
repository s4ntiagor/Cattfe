from flask import Flask, render_template, request, session,  jsonify, redirect, url_for, flash
from flask_mysqldb import MySQL


app = Flask(__name__, template_folder='template')

# Configuración de la base de datos
app.config['MYSQL_HOST'] = 'localhost'
app.config['MYSQL_USER'] = 'root'
app.config['MYSQL_PASSWORD'] = 'mysql2023'
app.config['MYSQL_DB'] = 'catffe'
app.config['MYSQL_CURSORCLASS'] = 'DictCursor'

# Inicialización de MySQL
mysql = MySQL(app)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/sale')
def sale():
    return render_template('sale.html')

# Ruta del login

@app.route('/acceso-login', methods=["GET", "POST"])
def login():
    if request.method == 'POST' and 'txtIdentificacion' in request.form and 'txtPassword':
        _identificacion = request.form['txtIdentificacion']
        _password = request.form['txtPassword']
    
        cur = mysql.connection.cursor()
        cur.execute('SELECT * FROM usuario WHERE identificacion_usuario = %s AND contrasena = %s', (_identificacion, _password))
        account = cur.fetchone()

    
        if account:
            session['logueado'] = True
            session['id'] = account['identificacion_usuario']
            session['rol'] = account['nombre_rol']

            
            if session['rol']==1:
                return render_template("admin_dashboard.html")
            elif session['rol']==2:
                return render_template("sale.html")
        else:
            return render_template('index.html', mensaje = "usuario o contraseña incorrecta")

@app.route('/logout')
def logout():
    # Eliminar el usuario de la sesión
    session.pop('id', None)
    return redirect(url_for('index'))

# Rutas del admin

@app.route('/admin_dashboard')
def admin_dashboard():
    return render_template('admin_dashboard.html')

@app.route('/register_admin', methods=['GET', 'POST'])
def register_admin():
    if request.method == 'POST':
        
        # Recoger los datos del formulario
        nombre = request.form['nombre']
        apellido = request.form['apellido']
        email = request.form['email']
        telefono = request.form['telefono']
        identificacion_cliente = request.form['identificacion']
        fecha_nacimiento = request.form['fecha_nacimiento']

        # Verificar si el cliente ya está registrado
        cur = mysql.connection.cursor()
        cur.execute('SELECT * FROM cliente WHERE identificacion_cliente = %s', [identificacion_cliente])
        cliente_existente = cur.fetchone()

        if cliente_existente:
            return render_template('register.html', mensaje="El cliente con la identificación {} ya está registrado.".format(identificacion_cliente))

        # Si el cliente no existe, procede con la inserción
        cur.execute('INSERT INTO cliente (nombre_cliente, apellido_cliente, email_cliente, telefono_cliente, identificacion_cliente, fecha_nacimiento_cliente) VALUES (%s, %s, %s, %s, %s, %s)', (nombre, apellido, email, telefono, identificacion_cliente, fecha_nacimiento))

        mysql.connection.commit()
        cur.close()

        return render_template('admin_dashboard.html', mensaje = "cliente registrado con éxito!")
    
    else:
        # Renderizar la página de registro
        return render_template('register_admin.html')

@app.route('/get_cliente/<identificacion>', methods=['GET'])
def get_cliente(identificacion):
    cur = mysql.connection.cursor()
    cur.execute('SELECT * FROM cliente WHERE identificacion_cliente = %s', [identificacion])
    cliente = cur.fetchone()
    cur.close()

    if cliente:
        return jsonify(cliente)
    else:
        return jsonify({"error": "Cliente no encontrado"}), 404

@app.route('/delete_cliente/<int:cliente_id>', methods=['POST'])
def delete_cliente(cliente_id):
    cur = mysql.connection.cursor()
    cur.execute('DELETE FROM cliente WHERE identificacion_cliente = %s', [cliente_id])
    mysql.connection.commit()
    cur.close()
    return jsonify(status="success", message="Cliente eliminado con éxito.")


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        
        # Recoger los datos del formulario
        nombre = request.form['nombre']
        apellido = request.form['apellido']
        email = request.form['email']
        telefono = request.form['telefono']
        identificacion_cliente = request.form['identificacion']
        fecha_nacimiento = request.form['fecha_nacimiento']

        # Verificar si el cliente ya está registrado
        cur = mysql.connection.cursor()
        cur.execute('SELECT * FROM cliente WHERE identificacion_cliente = %s', [identificacion_cliente])
        cliente_existente = cur.fetchone()

        if cliente_existente:
            return render_template('register.html', mensaje="El cliente con la identificación {} ya está registrado.".format(identificacion_cliente))

        # Si el cliente no existe, procede con la inserción
        cur.execute('INSERT INTO cliente (nombre_cliente, apellido_cliente, email_cliente, telefono_cliente, identificacion_cliente, fecha_nacimiento_cliente) VALUES (%s, %s, %s, %s, %s, %s)', (nombre, apellido, email, telefono, identificacion_cliente, fecha_nacimiento))

        mysql.connection.commit()
        cur.close()

        return render_template('sale.html', mensaje = "cliente registrado con éxito!")
    
    else:
        # Renderizar la página de registro
        return render_template('register.html')

    
@app.route('/search_product/<int:product_id>', methods=['GET'])
def search_product(product_id):
    cur = mysql.connection.cursor()
    cur.execute('SELECT * FROM productos WHERE id_producto = %s', [product_id])
    product = cur.fetchone()
    return product

@app.route('/get_product/<int:product_id>', methods=['GET'])
def get_product(product_id):
    cur = mysql.connection.cursor()
    cur.execute('SELECT * FROM productos WHERE id_producto = %s', [product_id])
    product = cur.fetchone()
    return jsonify(product)

@app.route('/agregar_producto', methods=['POST'])
def agregar_producto():
    # Recoger los datos del formulario
        id_producto = int(request.form['id_producto'])  # Corrección aquí
        nombre_producto = request.form['nombre_producto']
        precio_producto = float(request.form['precio_producto'])
        descripcion_producto = request.form['descripcion_producto']
        tipo = request.form['tipo']

        # Insertar los datos en la base de datos
        cur = mysql.connection.cursor()
        
        # Modificación de la consulta SQL para incluir todos los campos
        cur.execute('INSERT INTO productos (id_producto, nombre_producto, precio_producto, descripcion_producto, tipo) VALUES (%s, %s, %s, %s, %s)', 
                    (id_producto, nombre_producto, precio_producto, descripcion_producto, tipo))

        mysql.connection.commit()
        cur.close()
        return render_template('admin_dashboard.html', mensaje="Producto agregado con éxito!")
    

@app.route('/process_sale', methods=['POST'])
def process_sale():
    # Recoger los datos del formulario
    cedula = request.form['cedula']
    fecha_hora = request.form['fecha_hora']

    # Insertar la venta en la base de datos
    cur = mysql.connection.cursor()

    # Insertar en la tabla venta
    cur.execute('INSERT INTO venta (fecha_hora, id_cliente) VALUES (%s, %s)', 
                (fecha_hora, session['id']))  # Asumiendo que tienes el id del usuario en la sesión

    # Obtener el ID de la venta que acabamos de insertar
    id_venta = cur.lastrowid

    mysql.connection.commit()
    cur.close()
    return render_template('sale.html', mensaje="Venta procesada con éxito!")

@app.route('/agregar_mascota', methods=['GET', 'POST'])
def agregar_mascota():
    if request.method == 'POST':
        id_cliente = request.form['id_cliente']
        nombre_mascota = request.form['nombre_mascota']
        color_mascota = request.form['color_mascota']
        fecha_nacimiento_mascota = request.form['fecha_nacimiento_mascota']

        # Conexión a la base de datos y guardar los datos
        cur = mysql.connection.cursor()
        cur.execute('INSERT INTO mascota (id_cliente, nombre_mascota, color_mascota, fecha_nacimiento_mascota) VALUES (%s, %s, %s, %s)', 
                    (id_cliente, nombre_mascota, color_mascota, fecha_nacimiento_mascota))
        mysql.connection.commit()
        cur.close()

        # Redirigir o mostrar un mensaje después de guardar
        return "Mascota agregada con éxito!"
    return render_template('agregar_mascota.html')


@app.route('/modificar_producto', methods=['GET', 'POST'])
def modificar_producto():
    if request.method == 'POST':
        # Aquí iría el código para modificar un producto en la base de datos
        pass
    return render_template('modificar_producto.html')

@app.route('/test')
def test():
    return "Test route is working!"


if __name__ == '__main__':
    app.secret_key = '123456'
    app.run(debug=True, host='0.0.0.0', port=5000, threaded=True)


